{"version":3,"sources":["initial-data.js","Task.js","Column.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Handle","Task","task","index","draggableId","provided","snapshot","draggableProps","ref","innerRef","dragHandleProps","Title","h3","TaskList","isDraggingOver","InnerList","React","memo","map","idx","Column","column","droppableId","type","droppableProps","placeholder","taskMap","elem","App","useState","state","setState","onDragEnd","useCallback","result","source","destination","newColumnOrder","Array","from","splice","start","finish","startTaskIds","newStart","finishTaskIds","newFinish","newTaksIds","newColumn","direction","columnId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26681b97.chunk.js","sourcesContent":["const initialData = {\n  tasks: {\n    'task-1': { id: 'task-1', content: 'Take out the garbage' },\n    'task-2': { id: 'task-2', content: 'Watch my favorite show' },\n    'task-3': { id: 'task-3', content: 'Charge my phone' },\n    'task-4': { id: 'task-4', content: 'Cook dinner' },\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To do',\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In progress',\n      taskIds: []\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: []\n    }\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3']\n}\n\nexport default initialData","import React from 'react'\nimport styled from 'styled-components'\nimport { Draggable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${props => props.isDragging ? 'lightgreen' : 'white'};\n  display: flex;\n`\n\nconst Handle = styled.div`\n  width: 20px;\n  height: 20px;\n  background-color: orange;\n  border-radius: 4px;\n  margin-right: 8px;\n`\n\nconst Task = (props) => {\n  const { task, index } = props\n\n  return (\n    <Draggable\n      draggableId={task.id}\n      index={index}\n    >\n      {(provided, snapshot) => (\n        <Container\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n        >\n          <Handle {...provided.dragHandleProps} />\n          {task.content}\n        </Container>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Task","import React from 'react'\nimport styled from 'styled-components'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport Task from './Task'\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  background-color: white;\n  border-radius: 2px;\n  width: 220px;\n\n  display: flex;\n  flex-direction: column;\n`\nconst Title = styled.h3`\n  padding: 8px;\n`\nconst TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${props => props.isDraggingOver ? 'skyblue' : 'white'};\n  flex-grow: 1;\n  min-height: 100px;\n`\n\nconst InnerList = React.memo(function ({ tasks }) {\n  return tasks.map((task, idx) => <Task key={task.id} task={task} index={idx} />)\n})\n\nconst Column = (props) => {\n  const { column, tasks, index } = props\n\n  return (\n    <Draggable\n      draggableId={column.id}\n      index={index}\n    >\n      {(provided) => (\n        <Container\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n        >\n          <Title\n            {...provided.dragHandleProps}\n          >\n            {column.title}\n          </Title>\n          <Droppable\n            droppableId={column.id}\n            type=\"task\"\n          >\n            {(provided, snapshot) => (\n              <TaskList\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={snapshot.isDraggingOver}\n              >\n                <InnerList tasks={tasks} />\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n        </Container>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Column","import React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport '@atlaskit/css-reset'\n\nimport initialData from './initial-data'\nimport Column from './Column'\n\nconst Container = styled.div`\n  display: flex;\n`\n\nconst InnerList = React.memo(function(props) {\n  const { column, taskMap, index } = props\n\n  return <Column\n    column={column}\n    tasks={column.taskIds.map(elem => taskMap[elem])}\n    index={index}\n  />\n})\n\nconst App = () => {\n  const [state, setState] = useState(initialData)\n\n  const onDragEnd = useCallback((result) => {\n    const { source, destination, draggableId, type } = result\n    if (!destination) return\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) return\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(state.columnOrder)\n      newColumnOrder.splice(source.index, 1)\n      newColumnOrder.splice(destination.index, 0, draggableId)\n\n      setState({\n        ...state,\n        columnOrder: newColumnOrder\n      })\n\n      return\n    }\n\n    const start = state.columns[source.droppableId]\n    const finish = state.columns[destination.droppableId]\n    if (start.id === finish.id) {\n      const newTaksIds = Array.from(start.taskIds)\n      newTaksIds.splice(source.index, 1)\n      newTaksIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = { ...start, taskIds: newTaksIds }\n\n      setState({\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      })\n      return\n    }\n\n    const startTaskIds = Array.from(start.taskIds)\n    startTaskIds.splice(source.index, 1)\n    const newStart = { ...start, taskIds: startTaskIds }\n\n    const finishTaskIds = Array.from(finish.taskIds)\n    finishTaskIds.splice(destination.index, 0, draggableId)\n    const newFinish = { ...finish, taskIds: finishTaskIds }\n\n    setState({\n      ...state,\n      columns: {\n        ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    })\n  }, [state])\n\n  return (\n    <DragDropContext\n      onDragEnd={onDragEnd}\n    >\n      <Droppable\n        droppableId='all-columns'\n        direction='horizontal'\n        type='column'\n      >\n        {(provided) => (\n          <Container\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n          {\n            state.columnOrder.map((columnId, idx) => {\n              const column = state.columns[columnId]\n\n              return (\n                <InnerList\n                  key={column.id}\n                  column={column}\n                  taskMap={state.tasks}\n                  index={idx}\n                />\n              )\n            })\n          }\n          {provided.placeholder}\n          </Container>\n        )}\n      </Droppable>\n    </DragDropContext>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}